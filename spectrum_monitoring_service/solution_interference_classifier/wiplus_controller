#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
WiSHFUL Final Showcase: Warm-up phase - Overlapping BSS Management

Usage:
   controller [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
# get access to lib dir
sys.path.append('../')
sys.path.append('../../')

import os
import time
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis
from lib.global_controller_proxy import GlobalSolutionControllerProxy

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2018, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
wiplusEnabled = True
nodes = []

def start_bs(value):
    print("Start WiPLUS")
    global wiplusEnabled
    wiplusEnabled = True

def stop_bs(value):
    print("Stop WiPLUS")
    global wiplusEnabled
    wiplusEnabled = False

@controller.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:", node.name)

@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))

def get_node_by_name(nodes, nodeName):
    for n in nodes:
        if n.name == nodeName:
            return n
    return None

def main(args):
    global controller
    global wiplusEnabled

    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    # Load controller script parameters
    parameters = config.get("parameters", None)
    if parameters:
        controllerName = parameters.get("controllerName", None)
        ad_address = parameters.get("ad_address", "127.0.0.1")

    controller.load_config(config)
    controller.start()

    solutionCtrProxy = GlobalSolutionControllerProxy(ip_address=ad_address,
                                                     requestPort=7001,
                                                     subPort=7000)

    networkName = [controllerName]
    networkType = 'LTE_U'
    solutionName = ["WiPLUS_DETECTOR"]
    commands = {"ACTIVATE": start_bs,
                "DEACTIVATE": stop_bs,
                }
    monitorList = []
    solutionCtrProxy.set_solution_attributes(controllerName,
                                             networkType,
                                             solutionName,
                                             commands,
                                             monitorList
                                             )

    # Register OBSS_Management solution to global solution controller
    response = solutionCtrProxy.register_solution()
    if response:
        print("Solution was correctly registered to GlobalSolutionController")
        solutionCtrProxy.start_command_listener()
    else:
        print("Solution was not registered to Global Solution Controller")

    # control loop
    while True:
        gevent.sleep(1)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except Exception:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
